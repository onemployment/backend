name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:8-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 23.x
        uses: actions/setup-node@v4
        with:
          node-version: '23.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Format check
        run: npm run format:check

      - name: Build
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit

      - name: Run integration tests
        run: npm run test:int
        env:
          REDIS_URL: redis://localhost:6379

  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: onemployment/api
          IMAGE_TAG_LATEST: latest
          IMAGE_TAG_SHA: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA
          echo "Image pushed to ECR:"
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_LATEST"
          echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_SHA"

      - name: Deploy to Amazon ECS
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: onemployment/api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Update ECS service to trigger deployment with new image
          aws ecs update-service \
            --cluster onemployment-cluster \
            --service backend-service \
            --force-new-deployment \
            --region us-east-2

          echo "ECS service deployment triggered"
          echo "Image deployed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

          # Wait for deployment to stabilize
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster onemployment-cluster \
            --services backend-service \
            --region us-east-2

          echo "Deployment completed successfully!"
